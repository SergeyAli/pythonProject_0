'''
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
'''

import logging

logging.basicConfig(filename='project.log', filemode='a', encoding='utf-8', level=logging.NOTSET)
logger = logging.getLogger(__name__)


def diving(a, b):
    try:
        res = a / b
        logger.info(f'–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å —á–∏—Å–ª–∞ {a} –Ω–∞ {b} = {res}')
        return res
    except ZeroDivisionError as exp:
        logger.error(f'–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å —á–∏—Å–ª–∞ {a}')
        print('–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è')
    return float('inf')

if __name__ == '__main__':
    print(diving(2, 6))
